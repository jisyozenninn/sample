import pygame as pg, sys
import random
pg.init()
screen = pg.display.set_mode((800, 600))
# 魚
fishimg = pg.image.load("saba.png")
fishimg = pg.transform.scale(fishimg, (120, 100))
fishrect = pg.Rect(100, 300, 120, 100)
# エサ
foodimg = pg.image.load("esa.png")
foodimg = pg.transform.scale(foodimg, (30, 30))
foodrect = pg.Rect(800, 400, 30, 30)
# シャチ
orcaimg = pg.image.load("orca.png")
orcaimg = pg.transform.scale(orcaimg, (140, 120))
orcarect = pg.Rect(800, 400, 140, 120)
# ライフ
life1img = pg.image.load("heart.png")
life1img = pg.transform.scale(life1img, (30, 30))
life1rect = pg.Rect(10, 10, 30, 30)
life2img = pg.image.load("heart.png")
life2img = pg.transform.scale(life1img, (30, 30))
life2rect = pg.Rect(40, 10, 30, 30)
life3img = pg.image.load("heart.png")
life3img = pg.transform.scale(life1img, (30, 30))
life3rect = pg.Rect(70, 10, 30, 30)
# 壁
walls = [pg.Rect(0,0,800,10), 
        pg.Rect(0,0,10,600),
        pg.Rect(790,0,10,600),
        pg.Rect(0,590,800,10)]
# ゲームオーバー画面
gameoverimg = pg.image.load("gameover.JPG")
gameoverimg = pg.transform.scale(gameoverimg, (800, 600)) 
gameoverrect = pg.Rect(-1000, -1000, 800, 600)

# ゲームステージ
while True:  
    screen.fill(pg.Color("NAVY"))	# 背景
    vx = 0
    vy = 0
    # 矢印キーで魚を操作
    key = pg.key.get_pressed()
    if key[pg.K_RIGHT]:
        vx = 3
    if key[pg.K_LEFT]:
        vx = -2.5
    if key[pg.K_UP]:
        vy = -3
    if key[pg.K_DOWN]:
        vy = 3
    fishrect.x += vx
    fishrect.y += vy
    screen.blit(fishimg,fishrect)
    screen.blit(orcaimg,orcarect)
    screen.blit(foodimg,foodrect)
    screen.blit(life1img,life1rect)
    screen.blit(life2img,life2rect)
    screen.blit(life3img,life3rect)
    screen.blit(gameoverimg,gameoverrect)

    # 壁の衝突判定
    if fishrect.collidelist(walls) != -1:
        fishrect.x -= vx
        fishrect.y -= vy
    # 壁の処理
    for wall in walls:
        pg.draw.rect(screen, pg.Color("NAVY"), wall)    
    # エサの処理
    foodrect.x -= 5        
    if foodrect.x < 0:
        foodrect.x = 900
        foodrect.y = random.randint(30,770) 
    # エサの衝突判定(回復)
    if foodrect.colliderect(fishrect) and life3rect == pg.Rect(70, 10, 30, 30):
        foodrect.x = 1000
        foodrect.y = random.randint(30, 770)
        pg.mixer.Sound("sounds/food.mp3").play()
    elif foodrect.colliderect(fishrect) and life3rect == pg.Rect(-100, -100, 30, 30) and life2rect == pg.Rect(40, 10, 30, 30):
        life3rect = pg.Rect(70, 10, 30, 30)
        foodrect.x = 1000
        foodrect.y = random.randint(30, 770)
        pg.mixer.Sound("sounds/food.mp3").play()
    elif foodrect.colliderect(fishrect) and life3rect == pg.Rect(-100, -100, 30, 30) and life2rect == pg.Rect(-100, -100, 30, 30):
        life2rect = pg.Rect(40, 10, 30, 30)
        foodrect.x = 1000
        foodrect.y = random.randint(30, 770)
        pg.mixer.Sound("sounds/food.mp3").play()       
    # シャチの処理
    orcarect.x -= 7
    if orcarect.x < 0:
        orcarect.x = 950
        orcarect.y = random.randint(140,480)
    # シャチの衝突判定(ダメージ)
    if orcarect.colliderect(fishrect) and life3rect == pg.Rect(70, 10, 30, 30):
        orcarect.x = 800
        orcarect.y = random.randint(140, 480)
        life3rect = pg.Rect(-100, -100, 30, 30)
        pg.mixer.Sound("sounds/orca.mp3").play()
    elif orcarect.colliderect(fishrect) and life2rect == pg.Rect(40, 10, 30, 30):
        orcarect.x = 800
        orcarect.y = random.randint(140, 480)
        life2rect = pg.Rect(-100, -100, 30, 30)
        pg.mixer.Sound("sounds/orca.mp3").play()        
    elif orcarect.colliderect(fishrect) and life2rect == pg.Rect(-100, -100, 30, 30):
        life1rect = pg.Rect(-100, -100, 30, 30)
        gameoverrect = pg.Rect(0, 0, 800, 600)
        walls = [pg.Rect(0,0,0,0), 
        pg.Rect(0,0,0,0),
        pg.Rect(0,0,0,0),
        pg.Rect(0,0,0,0)]
        pg.mixer.Sound("sounds/gameover.mp3").play()
        
    # スペースキーでリプレイ
    if key[pg.K_SPACE]:
        life1rect = pg.Rect(10, 10, 30, 30)
        life2rect = pg.Rect(40, 10, 30, 30)
        life3rect = pg.Rect(70, 10, 30, 30)
        fishrect = pg.Rect(100, 300, 120, 100)
        foodrect = pg.Rect(800, 400, 30, 30)
        orcarect = pg.Rect(800, 400, 140, 120)
        gameoverrect = pg.Rect(-1000, -1000, 800, 600)
        walls = [pg.Rect(0,0,800,10), 
        pg.Rect(0,0,10,600),
        pg.Rect(790,0,10,600),
        pg.Rect(0,590,800,10)]
            
    pg.display.update()
    pg.time.Clock().tick(60)
    for event in pg.event.get():
        if event.type == pg.QUIT:
            pg.quit()
            sys.exit()
